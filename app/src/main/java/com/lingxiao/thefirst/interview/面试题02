1.dp是什么，sp呢，有什么区别
答:
dp:是一种与像素密度无关的单位，好处:可以防止同样分辨率在不同物理尺寸的屏幕上带来的差异。
可以让UI适配的足够精细，而不是完全等比例缩放，可以做到一定程度的定制，足够精细。
sp:除了受屏幕密度影响外，还受到用户字体大小影响，通常情况下，建议使用sp来跟随用户字体大小设置。
因此通常情况下 我们还是建议使用sp作为字体的单位，除非一些特殊情况下不想跟随系统字体的变化，可以使用dp。

dp和px的关系：px = dp * (dpi / 160)
Density-independent pixel (dp)独立像素密度。标准是160dip.即1dp对应1个pixel，
屏幕密度越大，1dp对应 的像素点越多。 上面的公式中有个dpi，
dpi为DPI是Dots Per Inch（每英寸所打印的点数），也就是当设备的dpi为160的时候1px=1dp；
public static float applyDimension(int unit, float value, DisplayMetrics metrics)
{
switch (unit) {
case COMPLEX_UNIT_PX:
return value;
case COMPLEX_UNIT_DIP:
return value * metrics.density;
case COMPLEX_UNIT_SP:
return value * metrics.scaledDensity;
case COMPLEX_UNIT_PT:
return value * metrics.xdpi * (1.0f/72);
case COMPLEX_UNIT_IN:
return value * metrics.xdpi;
case COMPLEX_UNIT_MM:
return value * metrics.xdpi * (1.0f/25.4f);
}
return 0;
}
所以发现dp和sp的区别在于density和scaledDensity两个值上；
总结一下：
dp只跟屏幕的像素密度有关；
sp和dp很类似但唯一的区别是，Android系统允许用户自定义文字尺寸大小（小、正常、大、超大等等），当文字尺寸是“正常”时1sp=1dp=0.00625英寸，而当文字尺寸是“大”或“超大”时，1sp>1dp=0.00625英寸。类似我们在windows里调整字体尺寸以后的效果——窗口大小不变，只有文字大小改变。
示例图：(测试机器 三星note2)


2. 自定义View,ViewGroup注意那些回调?
    1. 构造方法
1.public View(Context context)
2.public View(Context context, @Nullable AttributeSet attrs)
3.public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr)
4.public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes)
构造方法严格来说不算回调，但除了方法一外都不需要我们手动调用，而且是自定义View仅有的必须要声明的方法。
构造方法1：当不在布局文件中声明而在代码中创建View时调用的方法
构造方法2：当在布局文件中声明，且没有在styles.xml中预设主题级或item级的默认属性时调用。attrs就是一组布局文件中的值（包括默认属性和自定义属性）
构造方法3：当在布局文件中声明，在attrs.xml中有声明一个属性，并在styles.xml中的主题item声明这个属性的值（即View的一组默认属性）调用
构造方法4：当在布局文件中声明，在styles.xml中的主题里没有声明但单独声明了View的一组默认属性时调用。
注意点：
属性赋值优先级：Xml定义 （方法二）> Xml的style定义（方法二） > defStyleAttr （方法三）> defStyleRes> theme直接定义（方法四）
构造方法四要求api21以上，所以我们一般采用构造方法二（没有默认属性）或构造方法三（有默认属性）
    2. void onFinishInflate()；
当系统解析XML中声明的View后回调此方法，调用顺序：内层View->外层View,如果是viewgroup,适合在这里获取子View。
注意点：
如果View没有在XML中声明而是直接在代码中构造的，则不会回调此方法
此时无法获取到View的宽高和位置
    3. void onAttachedToWindow()；
当view 被添加到window中回调，调用顺序：外层View->内层View。在XML中声明或在代码中构造，并调用addview（this view）方法都会回调该方法。
注意点：
此时View仅仅被添加到View，而没有开始绘制所以同样获取不到宽高和位置
    4. void onDetachedFromWindow()；
看名字就知道是与void onAttachedToWindow()；对应的方法，在VIew从Window中移除时回调，如执行removeView（）方法。
注意点：
如果一个View从window中被移除了，那么其内层View（如果有）也会被一起移除，都会回调该方法，且会先回调内层View的onDetachedFromWindow()方法。
    5. void onWindowFocusChanged(boolean hasWindowFocus)；
当View所在的Window获得或失去焦点时被回调此方法。除了常见的设置view的onGlobalLayoutListener，也可以通过这个方法取到VIew的宽高和位置；
也适合在判断当失去焦点时停止一些工作，如图片轮播，动画执行等，当获取到焦点后继续执行。
hasWindowFocus：View所在Window是否获取到焦点,当该Window获得焦点时，hasWindowFocus等于true，否则等于false。
    6. boolean onTouchEvent(MotionEvent event)；
当手指触摸View的时候回调该方法，前提是触摸事件没有被拦截或者被子View消费掉。该方法是事件分发流程中最后的消费者。
event：触摸事件对象，包含了该事件的所有信息，如触摸的类型（down、move、up），触摸位置等。
返回值:true：事件被消费了，false：没有被消费，事件传递到外层View，super方法：同false。


3. Android UI卡顿原因及解决办法
要达到60fps，Android每个16ms就会绘制一次Activity，通过上述的结论我们知道，
如果由于一些原因导致了我们的逻辑、CPU耗时、GPU耗时大于16ms，UI就无法完成一次绘制，
那么就会造成卡顿。简单的一句话就是：卡主线程了。
常见的UI卡顿原因：
内存抖动的问题
方法太耗时了（CPU占用）
解决方法：
我们利用工具：Hierarchy Viewer进行检测，优化思想是：查看自己的布局，层次是否很深以及渲染比较耗时，
然后想办法能否减少层级以及优化每一个View的渲染时间。
尽量避免过度绘制（overdraw）


4. Android存储类型
SharedPreference、File、网络、SQlite、contentProvider

5.Android各种ANR的时间
Service Timeout
文件：ActiveServices.java
    // How long we wait for a service to finish executing.
    static final int SERVICE_TIMEOUT = 20*1000; // 前台
    // How long we wait for a service to finish executing.
    static final int SERVICE_BACKGROUND_TIMEOUT = SERVICE_TIMEOUT * 10; // 后台
broadcast Timeout
文件：ActivityManagerService.java
    // How long we allow a receiver to run before giving up on it.
    static final int BROADCAST_FG_TIMEOUT = 10*1000;  // 前台
    static final int BROADCAST_BG_TIMEOUT = 60*1000;  // 后台
InputDispatching Timeout
文件：ActivityManagerService.java
    // How long we wait until we timeout on key dispatching.
    static final int KEY_DISPATCHING_TIMEOUT = 5*1000;